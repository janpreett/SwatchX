[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
asyncio_mode = "auto"
testpaths = [
    "tests",
]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "security: marks tests as security tests (deselect with '-m \"not security\"')",
    "performance: marks tests as performance tests (deselect with '-m \"not performance\"')",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "app/__init__.py",
    "app/*/__init__.py",
    "app/main.py",
    "*/tests/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]
