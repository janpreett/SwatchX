name: SwatchX CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Backend environment variables
  SECRET_KEY: ${{ secrets.SECRET_KEY || 'test-secret-key-for-ci' }}
  
  # Frontend environment variables
  VITE_API_URL: http://localhost:8000

jobs:
  # Backend Testing Job
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      # No external database needed - using SQLite in-memory
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend unit tests
      run: |
        cd backend
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: ${{ github.workspace }}/backend

    - name: Run backend integration tests
      run: |
        cd backend
        pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml
      env:
        PYTHONPATH: ${{ github.workspace }}/backend

    - name: Run backend security tests
      run: |
        cd backend
        pytest tests/security/ -v --cov=app --cov-append --cov-report=xml
      env:
        PYTHONPATH: ${{ github.workspace }}/backend

    - name: Run backend performance tests
      run: |
        cd backend
        pytest tests/performance/ -v
      env:
        PYTHONPATH: ${{ github.workspace }}/backend

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Backend Security Scanning Job
  backend-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Bandit security scan
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt

    - name: Run Safety dependency scan
      run: |
        cd backend
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  # Frontend Testing Job
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Run frontend unit tests
      run: |
        cd frontend
        npm run test:coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage

    - name: Run frontend security audit
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate

    - name: Upload frontend security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-security-reports
        path: frontend/npm-audit-report.json

  # End-to-End Testing Job
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      # We'll run the backend as a service for E2E tests
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        cd ../frontend
        npm ci

    - name: Start backend server
      run: |
        cd backend
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        PYTHONPATH: ${{ github.workspace }}/backend

    - name: Wait for backend to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'

    - name: Start frontend server
      run: |
        cd frontend
        npm run dev &
        sleep 10
      env:
        VITE_API_URL: http://localhost:8000

    - name: Wait for frontend to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:5173; do sleep 1; done'

    - name: Run Cypress E2E tests
      run: |
        cd frontend
        npm run test:e2e:headless
      env:
        CYPRESS_baseUrl: http://localhost:5173

    - name: Upload E2E test screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots

    - name: Upload E2E test videos
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-videos
        path: frontend/cypress/videos

  # Load Testing Job (Optional, runs on main branch only)
  load-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start backend server for load testing
      run: |
        cd backend
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        PYTHONPATH: ${{ github.workspace }}/backend

    - name: Wait for backend to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'

    - name: Run load tests
      run: |
        cd backend
        locust -f locustfile.py --headless --users 50 --spawn-rate 5 --run-time 2m --host=http://localhost:8000 --html=locust-report.html

    - name: Upload load test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-report
        path: backend/locust-report.html

  # Build and Deploy Job (for main branch)
  build-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend-tests, frontend-tests, e2e-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

    # Add deployment steps here when ready
    # - name: Deploy to production
    #   run: |
    #     # Add deployment commands here

  # Notification Job
  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [backend-tests, frontend-tests, e2e-tests, backend-security]
    
    steps:
    - name: Notify on success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.e2e-tests.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"

    - name: Notify on failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      run: |
        echo "❌ Some tests failed. Please check the logs."
        exit 1
